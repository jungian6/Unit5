# WARNING - DO NOT EDIT THIS FILE. EDITING WILL RESULT IN FAILING THE UNIT TESTS THAT ARE RUN BY THE INSTRUCTOR

from exercise_1 import *
import pytest
from unittest.mock import patch
from io import StringIO

def test_calc_retail_price():
    assert calc_retail_price(5, 40) == 7.0
    assert round(calc_retail_price(25.3, 75), 3) == 44.275

@pytest.mark.timeout(2)  # Set a 2-second timeout for the entire test function
def test_main():
    # Function name you want to check
    function_name_to_check = 'main'

    # Check if the function is defined
    assert function_name_to_check in globals(), "main function not defined"

    def run_test(test_values, expected_output):
        input_values = test_values
        output = StringIO()

        def mock_input(prompt):
            print(prompt, end='')  # This will be captured in the StringIO object
            return input_values.pop(0)

        with patch('builtins.input', mock_input), patch('sys.stdout', output):
            try:
                main()  # Call unchanged function.
            except Exception as e:
                print(f"Main method failed. {e}")  # This will be captured in the StringIO object

        actual_output = output.getvalue()
        assert actual_output == expected_output, f"Expected:\n{expected_output}\nGot:\n{actual_output}"

    # run first test
    run_test(['10', '36'],
        'Please enter a wholesale cost:\n'
        'Please enter a markup percentage:\n'
        f"The retail price is £{13.60:.2f}.\n"
    )

    # run second test
    run_test(['100', '52.3'],
        'Please enter a wholesale cost:\n'
        'Please enter a markup percentage:\n'
        f"The retail price is £{152.30:.2f}.\n"
    )